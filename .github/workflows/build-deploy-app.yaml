name: Docker CI/CD app

on:
  push:
    branches: [master]
    paths:
      - ".github/workflows/build-deploy-app.yaml"
      - 'frontend/**'
      - 'backend/**'
      - '.infrastructure/docker-compose.yaml'

jobs:
  sonarqube-analysis:
    name: SonarQube Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # https://sonarqube.kdidp.art
      
      # Block deployment if Quality Gate fails (critical security issues)
      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build-app:
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    outputs:
      short_sha: ${{ steps.set_output.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set short SHA
        id: set_output
        run: echo "short_sha=${GITHUB_SHA::10}" >> $GITHUB_OUTPUT

      - name: Docker TLS Setup + Build Images
        run: |
          cp -r .infrastructure/.docker/* .
        
          chmod +x ./docker-tls-setup.sh
          source docker-tls-setup.sh
          
          cd $GITHUB_WORKSPACE/backend/
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:${{ steps.set_output.outputs.short_sha }} .

          cd $GITHUB_WORKSPACE/frontend/
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ steps.set_output.outputs.short_sha }} .

        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          CERT_PEM: ${{ secrets.CERT_PEM }}
          KEY_PEM: ${{ secrets.KEY_PEM }}
          CA_PEM: ${{ secrets.CA_PEM }}

  deploy-app:
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Docker TLS Setup + Docker Compose
        run: |
          cp .infrastructure/.docker/* .
          
          chmod +x ./docker-tls-setup.sh
          source docker-tls-setup.sh
          docker-compose up -d
          docker restart nginx-gateway
        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          CERT_PEM: ${{ secrets.CERT_PEM }}
          KEY_PEM: ${{ secrets.KEY_PEM }}
          CA_PEM: ${{ secrets.CA_PEM }}
          TAG: ${{ needs.build-app.outputs.short_sha }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          POSTGRES_DB: ${{secrets.POSTGRES_DATABASE}}
          POSTGRES_USER: ${{secrets.POSTGRES_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}


